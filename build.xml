<?xml version="1.0" ?>

<project name="starfish" default="build" basedir=".">

  <!-- ========================== COMMON SECTION ========================== -->

  <property environment="env"/>

  <!-- this is where we get the 'jpf.core' location from -->
  <property file="${user.home}/.jpf/site.properties"/>

  <!-- if there is none, default to a 'jpf-core' peer dir -->
  <property name="jpf-core" value = "../jpf-core"/>

  <!-- get the dependent project properties -->
  <property file="${jpf-core}/jpf.properties"/>

  <!-- if there is none, default to a 'jpf-core' peer dir -->
  <property name="jpf-symbc" value = "../jpf-symbc"/>

  <!-- get the jpf-symbc path properties -->
  <property file="${jpf-symbc}/jpf.properties"/>

  <property name="starlib" value = "../starlib"/>

  <!-- get the starlib path properties -->
  <property file="${starlib}/jpf.properties"/>

  <!-- if there is none, default to a 'jpf-core' peer dir -->
  <property name="jpf-star" value = "../jpf-star"/>

  <!-- get the jpf-symbc path properties -->
  <property file="${jpf-star}/jpf.properties"/>


  <!-- compiler settings -->
  <property name="src_level"     value="8"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>


  <!-- generic classpath settings -->
  <path id="lib.path">

    <!-- our own classes and libs come first -->
    <pathelement location="build/main"/>
    <!-- we don't have these
    <pathelement location="build/peers"/>
    -->
    <fileset dir=".">
        <include name="lib/*.jar"/>
    </fileset>

    <!-- add projects we depend on -->
    <pathelement path="${jpf-core.native_classpath}"/>
    <pathelement path="${jpf-symbc.native_classpath}"/>
    <pathelement path="${starlib.native_classpath}"/>
    <pathelement path="${jpf-star.native_classpath}"/>

  </path>

  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>               <!-- the build root -->

    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>


    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/classes"     type="dir" property="have_classes"/>
    <available file="src/peers"       type="dir" property="have_peers"/>
    <available file="src/examples"    type="dir" property="have_examples"/>

    <!-- optionally set the required artifacts here
    <fail unless="have_main">no src/main</fail>
    -->

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->

  <!-- public compile -->
  <target name="compile" depends="-init,-compile-main,-compile-classes,-compile-peers,-compile-examples"
          description="compile all sources" >
  </target>

  <target name="-compile-main" if="have_main">
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  <target name="-compile-classes" if="have_classes" depends="-compile-main" >
    <mkdir dir="build/classes"/>
    <javac srcdir="src/classes" destdir="build/classes"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           includeantruntime="false">
      <classpath>
          <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-peers" if="have_peers" depends="-compile-main" >
    <mkdir dir="build/peers"/>
    <javac srcdir="src/peers" destdir="build/peers"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
	   classpathref="lib.path"
	   includeantruntime="false"/>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-main,-compile-classes" >
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
	   includeantruntime="false">
      <classpath>
	   <path refid="lib.path"/>
	   <pathelement location="build/classes"/>
      </classpath>
    </javac>
  </target>

  <!-- ======================= MISC SECTION ================================ -->

  <!-- build jars -->
  <target name="build" depends="compile,-jar-fish,-jar-class,create-tmp-dir"
        description="generate the ${ant.project.name} jar files" >
  </target>

  <target name="check-dir">
    <available property="tmp.dir" file="build/tmp" type="dir"/>
  </target>
 
  <!-- target #2. Create dir 'tmp' if doesn't exist -->
  <target name="create-tmp-dir" depends="check-dir" unless="tmp.dir">
    <mkdir dir="build/tmp"/>
  </target>

  <target name="-jar-fish">
    <jar jarfile="build/${ant.project.name}.jar" whenmanifestonly="skip">
      <fileset dir="build/main" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-class">
    <jar jarfile="build/${ant.project.name}-classes.jar">
      <fileset dir="build/classes"/> 
    </jar>
  </target>

  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
    <delete dir="build" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>

</project>
